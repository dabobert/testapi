<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>ForceDirected - Force Directed Static Graph</title>
    <style type="text/css">
        body
        {
            background-color: black;
						color: black;
        }
        #log
        {
            display: none;
            position: absolute;
        }
        #inner-details
        {
						display: none;
            position: fixed;
            top: 0px;
            right: 0px;
            width: 240px;
            background-color: Silver;
            height: 600px;
            font: normal normal 10px Verdana;
            padding: 20px;
        }
        #infovis
        {
            width: 1200px;
            height: 800px;
        }
        span.close
        {
            color: #FF5555;
            cursor: pointer;
            font-weight: bold;
            margin-left: 3px;
        }
        span.name
        {
            cursor: pointer;
        }
        /*TOOLTIPS*//*TOOLTIPS*/.tip
        {
						display: none;
            color: #111;
            width: 139px;
            background-color: white;
            border: 1px solid #ccc;
            -moz-box-shadow: #555 2px 2px 8px;
            -webkit-box-shadow: #555 2px 2px 8px;
            -o-box-shadow: #555 2px 2px 8px;
            box-shadow: #555 2px 2px 8px;
            opacity: 0.9;
            filter: alpha(opacity=90);
            font-size: 10px;
            font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
            padding: 7px;
        }
        .tip
        {
            text-align: left;
            width: auto;
            max-width: 500px;
        }
        .tip-title
        {
            font-size: 11px;
            text-align: center;
            margin-bottom: 2px;
        }
    </style>
    <script language="javascript" type="text/javascript" src="jit-yc.js"></script>
    <script language="javascript">
        var labelType, useGradients, nativeTextSupport, animate;

        (function () {
            var ua = navigator.userAgent,
      iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
      typeOfCanvas = typeof HTMLCanvasElement,
      nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
      textSupport = nativeCanvasSupport
        && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
            //I'm setting this based on the fact that ExCanvas provides text support for IE
            //and that as of today iPhone/iPad current text support is lame
            labelType = (!nativeCanvasSupport || (textSupport && !iStuff)) ? 'Native' : 'HTML';
            nativeTextSupport = labelType == 'Native';
            useGradients = nativeCanvasSupport;
            animate = !(iStuff || !nativeCanvasSupport);
        })();

        var Log = {
            elem: false,
            write: function (text) {
                if (!this.elem)
                    this.elem = document.getElementById('log');
                this.elem.innerHTML = text;
                this.elem.style.left = (500 - this.elem.offsetWidth / 2) + 'px';
            }
        };


        function init() {
            // init data
            var json = <%= raw(@response[:data].to_json) %>
			
            // end
            // init ForceDirected
            var fd = new $jit.ForceDirected({
                //id of the visualization container
                injectInto: 'infovis',
                //Enable zooming and panning
                //by scrolling and DnD
                Navigation: {
                    enable: true,
                    //Enable panning events only if we're dragging the empty
                    //canvas (and not a node).
                    panning: 'avoid nodes',
                    zooming: 10 //zoom speed. higher is more sensible
                },
                // Change node and edge styles such as
                // color and width.
                // These properties are also set per node
                // with dollar prefixed data-properties in the
                // JSON structure.
                Node: {
                    overridable: true
                },
                Edge: {
                    overridable: true,
                    color: '#23A4FF',
                    lineWidth: 0.4
                },
                //Native canvas text styling
                Label: {
                    type: labelType, //Native or HTML
                    size: 10,
                    style: 'bold'
                },
                //Add Tips
                Tips: {
                    enable: true,
                    onShow: function (tip, node) {
                        //count connections
                        var count = 0;
                        node.eachAdjacency(function () { count++; });
                        //display node info in tooltip
                        tip.innerHTML = "<div class=\"tip-title\">" + node.name + "</div>"
          + "<div class=\"tip-text\"><b>connections:</b> " + count + "</div>";
                    }
                },
                // Add node events
                Events: {
                    enable: true,
                    type: 'Native',
                    //Change cursor style when hovering a node
                    onMouseEnter: function () {
                        fd.canvas.getElement().style.cursor = 'move';
                    },
                    onMouseLeave: function () {
                        fd.canvas.getElement().style.cursor = '';
                    },
                    //Update node positions when dragged
                    onDragMove: function (node, eventInfo, e) {
                        var pos = eventInfo.getPos();
                        node.pos.setc(pos.x, pos.y);
                        fd.plot();
                    },
                    //Implement the same handler for touchscreens
                    onTouchMove: function (node, eventInfo, e) {
                        $jit.util.event.stop(e); //stop default touchmove event
                        this.onDragMove(node, eventInfo, e);
                    },
                    //Add also a click handler to nodes
                    onClick: function (node) {
                        if (!node) return;
                        // Build the right column relations list.
                        // This is done by traversing the clicked node connections.
                        var html = "<h4>" + node.name + "</h4><b> connections:</b><ul><li>",
            list = [];
                        node.eachAdjacency(function (adj) {
                            list.push(adj.nodeTo.name);
                        });
                        //append connections information
                        $jit.id('inner-details').innerHTML = html + list.join("</li><li>") + "</li></ul>";
                    }
                },
                //Number of iterations for the FD algorithm
                iterations: 200,
                //Edge length
                levelDistance: 130,
                // Add text to the labels. This method is only triggered
                // on label creation and only for DOM labels (not native canvas ones).
                onCreateLabel: function (domElement, node) {
                    domElement.innerHTML = node.name;
                    var style = domElement.style;
                    style.fontSize = "0.8em";
                    style.color = "#ddd";
                },
                // Change node styles when DOM labels are placed
                // or moved.
                onPlaceLabel: function (domElement, node) {
                    var style = domElement.style;
                    var left = parseInt(style.left);
                    var top = parseInt(style.top);
                    var w = domElement.offsetWidth;
                    style.left = (left - w / 2) + 'px';
                    style.top = (top + 10) + 'px';
                    style.display = '';
                }
            });
            // load JSON data.
            fd.loadJSON(json);
            // compute positions incrementally and animate.
            fd.computeIncremental({
                iter: 40,
                property: 'end',
                onStep: function (perc) {
                    Log.write(perc + '% loaded...');
                },
                onComplete: function () {
                    Log.write('done');
                    fd.animate({
                        modes: ['linear'],
                        transition: $jit.Trans.Elastic.easeOut,
                        duration: 2500
                    });
                }
            });
            // end
        }    
    </script>
</head>
<body onload="init();">
    <div id="inner-details">
    </div>
    <div id="infovis">
    </div>
    <div id="log">
    </div>
    </div>
</body>
</html>